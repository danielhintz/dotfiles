if !exists('g:vscode')
    let g:vebugger_leader ="<space>"

    " Formatting a file
    "nnoremap <leader>f mfgg=G`f

    command -bar Hexmode call ToggleHex()

    " helper function to toggle hex mode
    function ToggleHex()
      " hex mode should be considered a read-only operation
      " save values for modified and read-only for restoration later,
      " and clear the read-only flag for now
      let l:modified=&mod
      let l:oldreadonly=&readonly
      let &readonly=0
      let l:oldmodifiable=&modifiable
      let &modifiable=1
      if !exists("b:editHex") || !b:editHex
        " save old options
        let b:oldft=&ft
        let b:oldbin=&bin
        " set new options
        setlocal binary " make sure it overrides any textwidth, etc.
        silent :e " this will reload the file without trickeries
                  "(DOS line endings will be shown entirely )
        let &ft="xxd"
        " set status
        let b:editHex=1
        " switch to hex editor
        %!xxd
      else
        " restore old options
        let &ft=b:oldft
        if !b:oldbin
          setlocal nobinary
        endif
        " set status
        let b:editHex=0
        " return to normal editing
        %!xxd -r
      endif
      " restore values for modified and read only state
      let &mod=l:modified
      let &readonly=l:oldreadonly
      let &modifiable=l:oldmodifiable
    endfunction

    " Some basics:
    " Enable autocompletion:
    " Disables automatic commenting on newline:

    " Spell-check set to <leader>o, 'o' for 'orthography':
        map <leader>o :setlocal spell! spelllang=en_us<CR>

    " Splits open at the bottom and right, which is non-retarded, unlike vim defaults.
    " Open my bibliography file in split

    " Compile document, be it groff/LaTeX/markdown/etc.
        map <leader>c :w! \| !compiler <c-r>%<CR>

    " Open corresponding .pdf/.html or preview
        map <leader>p :!opout <c-r>%<CR><CR>

    " Runs a script that cleans out tex build files whenever I close out of a .tex file.

    " Ensure files are read as what I want:
        let g:vimwiki_ext2syntax = {'.Rmd': 'markdown', '.rmd': 'markdown','.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
        let g:vimwiki_list = [{'path': '~/vimwiki', 'syntax': 'markdown', 'ext': '.md'}]

    " Copy selected text to system clipboard (requires gvim/nvim/vim-x11 installed):
        vnoremap <C-c> "+y
        map <C-p> "+P

    " Automatically deletes all trailing whitespace on save.
    "	autocmd BufWritePre * %s/\s\+$//e

        "autocmd BufWritePost /home/hintz3y/.local/share/dwmblocks/config.h !cd '/home/hintz3y/.local/share/dwmblocks/'; sudo make install && { killall -q dwmblocks;setsid dwmblocks & }

    " Navigating with guides
        inoremap <leader><leader> <Esc>/<++><Enter>"_c4l
        vnoremap <leader><leader> <Esc>/<++><Enter>"_c4l
        map <leader><leader> <Esc>/<++><Enter>"_c4l


        let g:tex_flavor='latex'
        let g:vimtex_view_method='zathura'
        let g:vimtex_quickfix_mode=0
        set conceallevel=1
        let g:tex_conceal='abdmg'


    """C/C++
        "autocmd BufWritePre *.cpp,*.hpp,*.h,*.c :Neoformat
        nnoremap <leader>f :Neoformat<cr>
        "let g:neoformat_cpp_clangformat = {"exe": "clang-format", "args":["-style=.clang-format",],}
        let g:neoformat_gofmt = {"exe": "gofmt", "args":[],}

        nnoremap <F4> :!g++ % && ./a.out<cr>

        nnoremap <F5> :!make compile<cr>
        nnoremap <F6> :!make debug<cr>
        nnoremap <F8> :VBGstartGDB a.out<cr>

        inoremap <C-Space> <cmd>lua vim.lsp.omnifunc()<CR>

    """NETRW
        let g:netrw_banner = 0
        let g:netrw_liststyle = 3
        let g:netrw_browse_split = 4
        let g:netrw_altv = 1
        let g:netrw_winsize = 25
        let g:NetrwIsOpen = 0

        function! ToggleNetrw()
            if g:NetrwIsOpen
                let i = bufnr("$")
                while(i>=1)
                    if(getbufvar(i, "&filetype") == "netrw")
                        silent exe "bwipeout " . i
                    endif
                    let i-=1
                endwhile
                let g:NetrwIsOpen = 0
            else
                let g:NetrwIsOpen = 1
                silent Lexplore
            endif
        endfunction

        noremap <silent> <C-p> :call ToggleNetrw()<cr>

        let g:vimwiki_list = [{'path': '~/.local/share/vimwiki/', 'syntax': 'markdown', 'ext': '.md',
                      \ 'path_html': '~/.local/share/vimwiki_html'}]
endif
